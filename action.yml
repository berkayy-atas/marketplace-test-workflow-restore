name: 'Repository Restore'
description: 'Restores a backed-up GitHub repository using secure OTP and file ID through File Security API.'
author: 'your-github-username'

inputs:
  activation_code:
    description: 'Activation code for API'
    required: true
  encryption_key:
    description: 'Secret key for decrypting the backup'
    required: true
  record_id:
    description: 'Enter RECORD_ID to retrieve a specific backup file.'
    required: false
    default: ''
  restore_github_token:
    description: 'Optional: Token to restore workflows (if provided, full mirror restore with workflows).'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:

    - name: Validate encryption key length
      shell: bash
      run: |
        ENC_KEY="${{ inputs.encryption_key }}"
        if [ "${#ENC_KEY}" -lt 32 ]; then
          echo "::error ::The encryption_key must be at least 32 characters long (got ${#ENC_KEY})."
          exit 1
        fi
        
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Activation Token
      id: get_token
      shell: bash
      run: |
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/endpoint/activation" \
        -H "Content-Type: application/json" \
        -d '{
          "activationCode": "${{ inputs.activation_code }}",
          "uniqueId": "${{ github.repository_id }}",
          "ip": "${{ runner.ip }}",
          "operatingSystem": "Linux",
          "endpointType": "Workstation",
          "endpointName": "Github Endpoint (${{ github.repository }})"
        }')

        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)

        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to get token" && exit 1
        fi

        TOKEN=$(echo "$JSON_BODY" | jq -r '.data.token')
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Request OTP (With Debug Output)
      shell: bash
      run: |
        echo "Requesting OTP..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/OTP/Send" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ env.TOKEN }}" \
          -d '{
            "Source": "FileDownload",
            "OtpGenerationMode": "Number",
            "Type": "MAIL"
          }')

        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)

        echo "--- RAW API RESPONSE ---"
        echo "$RESPONSE"
        echo "-------------------------"
        echo "HTTP STATUS: $HTTP_STATUS"
        echo "JSON BODY: $JSON_BODY"

        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "OTP request failed. Status: $HTTP_STATUS"
          echo "Message: $(echo "$JSON_BODY" | jq -r '.message // .error // .msg // .description // "No error message provided"')"
          exit 1
        fi

        UNIQUE_KEY=$(echo "$JSON_BODY" | jq -r '.data.uniqueKey')
        echo "UNIQUE_KEY=$UNIQUE_KEY" >> $GITHUB_ENV


    - name: Await OTP Input
      id: await_otp
      uses: step-security/wait-for-secrets@v1
      with:
        secrets: |
          RESTORE_OTP_INPUT:
            name: 'Restore OTP'
            description: 'Enter OTP received via email'

    - name: Set OTP After Await
      shell: bash
      run: |
        echo "USER_OTP=${{ steps.await_otp.outputs.RESTORE_OTP_INPUT }}" >> $GITHUB_ENV

    - name: Retrieve Backup
      shell: bash
      run: |
        echo "Retrieving backup file..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "https://dev.api.file-security.icredible.com/restore/${{ inputs.record_id }}" \
        -H "Authorization: Bearer ${{ env.TOKEN }}" \
        -H "X-Verification-Key: ${{ env.USER_OTP }}" \
        -H "X-Unique-Key: ${{ env.UNIQUE_KEY }}"  -o repo.tar.zst.enc)
        echo "Raw API Response: $RESPONSE"
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to obtain backup file. Response: $RESPONSE"
          echo "Error: Received HTTP status $HTTP_STATUS"
          echo "Response: $JSON_BODY"
          exit 1
        fi
        echo "Backup file retrieved successfully."

    - name: Decrypt and Extract Backup
      shell: bash
      run: |
        echo "Decrypting repository"
        openssl enc -d -aes-256-cbc -pbkdf2 -in repo.tar.zst.enc -out repo.tar.zst -pass pass:${{ inputs.encryption_key }}
        echo "Extracting repository backup..."        
        zstd -d repo.tar.zst -o repo.tar
        tar -xf repo.tar
        rm -f repo.tar repo.tar.zst
        
        # Mirror dizinini bul ve yeniden adlandır
        if [ -d "repo-mirror" ]; then
          echo "Found repo-mirror directory"
        else
          # Mirror dizinini bul (adı farklı olabilir)
          mirror_dir=$(find . -maxdepth 1 -type d -name "*mirror*" | head -1)
          if [ -n "$mirror_dir" ]; then
            mv "$mirror_dir" repo-mirror
          else
            # Eğer mirror dizini yoksa, mevcut dizini mirror olarak kabul et
            echo "No mirror directory found, using current directory as repo-mirror"
            mkdir -p repo-mirror
            mv * .[^.]* repo-mirror/ || true
          fi
        fi
        
        echo "Decryption and extraction complete."
    
    - name: Convert Bare to Normal Repository
      shell: bash
      run: |
        # Bare repository'yi normal repoya dönüştür
        mkdir restored-repo
        git clone repo-mirror restored-repo
        
        # Orijinal mirror'ı sil
        rm -rf repo-mirror
        mv restored-repo repo-mirror
        cd repo-mirror
        
        echo "Successfully converted bare repository to normal repository"
    
    - name: Remove Workflows from All Branches
      if: ${{ !inputs.restore_github_token }}
      shell: bash
      run: |
        cd repo-mirror
        
        # Tüm branch'leri listele ve işle
        git fetch --all
        
        # Güvenli branch listeleme
        branches=()
        while IFS= read -r branch; do
            # Branch adını doğru şekilde al
            clean_branch=$(echo "$branch" | sed 's|^refs/remotes/origin/||')
            # HEAD referanslarını ve boş değerleri filtrele
            if [[ -n "$clean_branch" && "$clean_branch" != "HEAD" ]]; then
                branches+=("$clean_branch")
            fi
        done < <(git for-each-ref --format='%(refname)' refs/remotes/origin)
        
        # Varsayılan branch'i bul
        default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
        [ -z "$default_branch" ] && default_branch="main"
        
        # Önce varsayılan branch'e geç
        git checkout "$default_branch"
        
        # Tüm branch'leri işle
        for branch in "${branches[@]}"; do
            # Branch adında özel karakter olabileceği için tırnak kullan
            echo "Processing branch: '$branch'"
            
            # Branch zaten local'de var mı kontrol et
            if git show-ref --verify --quiet "refs/heads/$branch"; then
                echo "Branch '$branch' already exists locally, checking out"
                git checkout "$branch"
            else
                echo "Creating local branch '$branch' from origin/'$branch'"
                git checkout -b "$branch" "origin/$branch" --no-track
            fi
            
            # Workflow dizinini sil
            if [ -d ".github/workflows" ]; then
                rm -rf .github/workflows
                git add .github/workflows
                
                # Değişiklik varsa commit et
                if [ -n "$(git status --porcelain .github/workflows)" ]; then
                    git config user.name "myapp File Security"
                    git config user.email "file-security@myapp.com"
                    git commit -m "Remove workflows during restore"
                fi
            fi
        done
        
        # Varsayılan branch'e geri dön
        git checkout "$default_branch"
    
    - name: Configure Git and Push
      shell: bash
      run: |
        cd repo-mirror
        
        if [ -z "${{ inputs.restore_github_token }}" ]; then
          TOKEN_TO_USE="${{ github.token }}"
        else
          TOKEN_TO_USE="${{ inputs.restore_github_token }}"
        fi

        git config user.name "myapp File Security"
        git config user.email "file-security@myapp.com"
        git remote set-url origin https://x-access-token:${TOKEN_TO_USE}@github.com/${{ github.repository }}.git
        
        # HEAD referansını sil
        git remote set-head origin -d
        
        # Tüm branch'leri ve tag'leri tek seferde push et
        git push origin --force 'refs/heads/*:refs/heads/*' 'refs/tags/*:refs/tags/*'
        
        # Özel branch'leri güncelle
        git show-ref | grep 'refs/remotes/origin/' | while read sha ref; do
            branch_name=${ref#refs/remotes/origin/}
            # HEAD referanslarını atla
            if [[ $branch_name != "HEAD" ]]; then
                echo "Updating branch: $branch_name"
                git push origin "$sha:refs/heads/$branch_name" --force
            fi
        done
