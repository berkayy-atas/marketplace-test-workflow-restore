name: 'Repository Restore'
description: 'Restores a backed-up GitHub repository using secure OTP and file ID through File Security API.'
author: 'your-github-username'

inputs:
  activation_code:
    description: 'Activation code for API'
    required: true
  encryption_key:
    description: 'Secret key for decrypting the backup'
    required: true
  restore_github_token:
    description: 'Token for repository mirror'
    required: true
  record_id:
    description: 'Enter RECORD_ID to retrieve a specific backup file.'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Activation Token
      id: get_token
      shell: bash
      run: |
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/endpoint/activation" \
        -H "Content-Type: application/json" \
        -d '{
          "activationCode": "${{ inputs.activation_code }}",
          "uniqueId": "${{ github.repository_id }}",
          "ip": "${{ runner.ip }}",
          "operatingSystem": "Linux",
          "endpointType": "Workstation",
          "endpointName": "Github Endpoint (${{ github.repository }})"
        }')

        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)

        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to get token" && exit 1
        fi

        TOKEN=$(echo "$JSON_BODY" | jq -r '.data.token')
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Request OTP (With Debug Output)
      shell: bash
      run: |
        echo "Requesting OTP..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/OTP/Send" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ env.TOKEN }}" \
          -d '{
            "Source": "FileDownload",
            "OtpGenerationMode": "Number",
            "Type": "MAIL"
          }')
    
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
    
        echo "--- RAW API RESPONSE ---"
        echo "$RESPONSE"
        echo "-------------------------"
        echo "HTTP STATUS: $HTTP_STATUS"
        echo "JSON BODY: $JSON_BODY"
    
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "OTP request failed. Status: $HTTP_STATUS"
          echo "Message: $(echo "$JSON_BODY" | jq -r '.message // .error // .msg // .description // "No error message provided"')"
          exit 1
        fi
    
        UNIQUE_KEY=$(echo "$JSON_BODY" | jq -r '.data.uniqueKey')
        echo "UNIQUE_KEY=$UNIQUE_KEY" >> $GITHUB_ENV


    - name: Await OTP Input
      id: await_otp
      uses: step-security/wait-for-secrets@v1
      with:
        secrets: |
          RESTORE_OTP_INPUT:
            name: 'Restore OTP'
            description: 'Enter OTP received via email'

    - name: Set OTP After Await
      shell: bash
      run: |
        echo "USER_OTP=${{ steps.await_otp.outputs.RESTORE_OTP_INPUT }}" >> $GITHUB_ENV

    - name: Retrieve Backup
      shell: bash
      run: |
        echo "Retrieving backup file..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "https://dev.api.file-security.icredible.com/restore/${{ inputs.record_id }}" \
        -H "Authorization: Bearer ${{ env.TOKEN }}" \
        -H "X-Verification-Key: ${{ env.USER_OTP }}" \
        -H "X-Unique-Key: ${{ env.UNIQUE_KEY }}"  -o repo.tar.zst.enc)
        echo "Raw API Response: $RESPONSE"
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to obtain backup file. Response: $RESPONSE"
          echo "Error: Received HTTP status $HTTP_STATUS"
          echo "Response: $JSON_BODY"
          exit 1
        fi
        echo "Backup file retrieved successfully."

    - name: Decrypt and Extract Backup
      shell: bash
      run: |
        echo "Decryption repository"
        openssl enc -d -aes-256-cbc -pbkdf2 -in repo.tar.zst.enc -out repo.tar.zst -pass pass:${{ inputs.encryption_key }}
        echo "Extracting repository backup..."        
        zstd -d repo.tar.zst -o repo.tar
        mkdir repo-mirror repo-metadata
        tar -xf repo.tar -C .
        rm -f repo.tar repo.tar.zst
        echo "Decryption and extraction complete."

    - name: Git Configuration
      shell: bash
      run: |
        cd repo-mirror
        git config user.name "myapp File Security"
        git config user.email "file-security@myapp.com"
        git config url."https://x-access-token:${{ inputs.restore_github_token }}@github.com/".insteadOf https://github.com/

    - name: Install GitHub CLI
      shell: bash
      run: |
        # Install GH CLI without verbose output
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg 2>/dev/null
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
        sudo apt-get update -qq
        sudo apt-get install -y gh jq -qq
        
    - name: Authenticate GitHub CLI
      shell: bash
      run: |
        echo "${{ inputs.restore_github_token }}" | gh auth login --with-token
        
    - name: Push Restored Repository
      shell: bash
      run: |
        cd repo-mirror
        git remote set-url origin https://x-access-token:${{ inputs.restore_github_token }}@github.com/${{ github.repository }}.git
        
        # Temporarily disable branch protections
        protected_branches=$(gh api -X GET "/repos/${{ github.repository }}/branches?protected=true" -q '.[].name' 2>/dev/null || echo "")
        for branch in $protected_branches; do
          gh api -X DELETE "/repos/${{ github.repository }}/branches/$branch/protection"
        done
        
        git push --mirror --force
        
        # Re-enable branch protections
        for branch in $protected_branches; do
          echo "Re-enabling protection for $branch"
          gh api -X PUT "/repos/${{ github.repository }}/branches/$branch/protection" \
            -f '{
              "required_status_checks": null,
              "enforce_admins": true,
              "required_pull_request_reviews": null,
              "restrictions": null
            }'
        done
        
        echo "Code repository restored successfully."
  
    # --- METADATA RESTORE STEPS ---
    - name: Restore Labels
      shell: bash
      run: |
        echo "Restoring labels..."
        jq -c '.data.repository.labels.nodes[]' repo-metadata/labels_milestones.json | while read label; do
          name=$(jq -r '.name' <<< "$label")
          color=$(jq -r '.color' <<< "$label")
          description=$(jq -r '.description // ""' <<< "$label")
          
          # Skip if label already exists
          if gh label list | grep -q -w "$name"; then
            echo "Skipping existing label: $name"
            continue
          fi
          
          echo "Creating label: $name"
          gh label create "$name" --color "$color" --description "$description"
        done
        echo "Label restoration completed."

    - name: Restore Milestones
      shell: bash
      run: |
        echo "Restoring milestones..."
        jq -c '.data.repository.milestones.nodes[]' repo-metadata/labels_milestones.json | while read milestone; do
          title=$(jq -r '.title' <<< "$milestone")
          description=$(jq -r '.description // ""' <<< "$milestone")
          due_date=$(jq -r '.dueOn // ""' <<< "$milestone")
          
          # Skip if milestone already exists
          if gh milestone list | grep -q -w "$title"; then
            echo "Skipping existing milestone: $title"
            continue
          fi
          
          echo "Creating milestone: $title"
          cmd="gh milestone create \"$title\""
          [ -n "$description" ] && cmd+=" --description \"$description\""
          [ -n "$due_date" ] && cmd+=" --due-date \"$due_date\""
          eval "$cmd"
        done
        echo "Milestone restoration completed."

    - name: Restore Issues
      shell: bash
      run: |
        echo "Restoring issues..."
        jq -c '.[]' repo-metadata/issues.json | while read issue; do
          title=$(jq -r '.title' <<< "$issue")
          body=$(jq -r '.body' <<< "$issue")
          labels=$(jq -r '.labels[].name' <<< "$issue" | tr '\n' ',' | sed 's/,$//')
          state=$(jq -r '.state' <<< "$issue")
          
          # Skip if issue already exists
          if gh issue list --json title -q ".[] | select(.title == \"$title\")" | grep -q .; then
            echo "Skipping existing issue: $title"
            continue
          fi
          
          echo "Creating issue: $title"
          gh issue create --title "$title" --body "$body" --label "$labels"
          
          if [ "$state" = "CLOSED" ]; then
            issue_number=$(gh issue list --json number,title -q ".[] | select(.title == \"$title\") | .number")
            if [ -n "$issue_number" ]; then
              echo "Closing issue: $title"
              gh issue close "$issue_number"
            fi
          fi
        done
        echo "Issue restoration completed."

     - name: Restore Pull Requests
      shell: bash
      run: |
        echo "Restoring pull requests..."
        jq -c '.[]' repo-metadata/pull_requests.json | while read pr; do
          title=$(jq -r '.title' <<< "$pr")
          body=$(jq -r '.body' <<< "$pr")
          head_ref=$(jq -r '.headRefName' <<< "$pr")
          base_ref=$(jq -r '.baseRefName' <<< "$pr")
          pr_number=$(jq -r '.number' <<< "$pr")
          state=$(jq -r '.state' <<< "$pr")
          merged=$(jq -r '.merged' <<< "$pr")
          labels=$(jq -r '.labels[].name' <<< "$pr" | tr '\n' ',' | sed 's/,$//')
          
          # PR'ı oluştur
          echo "Creating PR: $title (from $head_ref to $base_ref)"
          gh pr create --title "$title" --body "$body" --head "$head_ref" --base "$base_ref" --label "$labels"
          
          # PR durumunu güncelle
          new_pr_number=$(gh pr list --json number,title -q ".[] | select(.title == \"$title\") | .number")
          
          if [ "$state" != "OPEN" ] || [ "$merged" = "true" ]; then
            if [ "$merged" = "true" ]; then
              echo "Merging PR #$new_pr_number"
              gh pr merge "$new_pr_number" --merge
            else
              echo "Closing PR #$new_pr_number"
              gh pr close "$new_pr_number"
            fi
          fi
        done
        echo "Pull request restoration completed."

    - name: Restore Branches for Pull Requests
      shell: bash
      run: |
        echo "Ensuring all branches exist for pull requests..."
        jq -c '.data.repository.refs.nodes[]' repo-metadata/branches.json | while read branch; do
          branch_name=$(echo "$branch" | jq -r '.name')
          commit_sha=$(echo "$branch" | jq -r '.target.oid')
          
          # Branch'in zaten var olup olmadığını kontrol et
          if ! git show-ref --verify --quiet refs/heads/"$branch_name"; then
            echo "Creating branch: $branch_name at $commit_sha"
            git branch "$branch_name" "$commit_sha"
            git push origin "$branch_name"
          else
            echo "Branch already exists: $branch_name"
          fi
        done
