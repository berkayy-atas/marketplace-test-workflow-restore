name: 'Repository Restore'
description: 'Restores a backed-up GitHub repository using secure OTP and file ID through File Security API.'
author: 'your-github-username'

inputs:
  activation_code:
    description: 'Activation code for API'
    required: true
  encryption_password:
    description: 'Secret key for decrypting the backup'
    required: true
  file_version_id:
    description: 'Enter FILE_VERSION_ID to retrieve a specific backup file.'
    required: true
    default: ''
  restore_github_token:
    description: 'Optional: Token to restore workflows (if provided, full mirror restore with workflows).'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
   
    - name: Validate encryption password length
      shell: bash
      run: |
        ENC_PASS="${{ inputs.encryption_password }}"
        if [ "${#ENC_PASS}" -lt 32 ]; then
          echo "::error ::The encryption_password must be at least 32 characters long (got ${#ENC_PASS})."
          exit 1
        fi
        
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0


    - name: Get Activation Token
      id: get_token
      shell: bash
      run: |
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/endpoint/activation" \
        -H "Content-Type: application/json" \
        -d '{
          "activationCode": "${{ inputs.activation_code }}",
          "uniqueId": "${{ github.repository_id }}",
          "ip": "${{ runner.ip }}",
          "operatingSystem": "Linux",
          "endpointType": "Workstation",
          "endpointName": "Github Endpoint (${{ github.repository }})"
        }')

        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)

        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to get token" && exit 1
        fi

        TOKEN=$(echo "$JSON_BODY" | jq -r '.data.token')
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Request OTP
      shell: bash
      run: |
        echo "Requesting OTP..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/OTP/Send" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ env.TOKEN }}" \
          -d '{
            "Source": "FileDownload",
            "OtpGenerationMode": "Number",
            "Type": "MAIL"
          }')

        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
        echo "HTTP STATUS: $HTTP_STATUS"

        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "::error :: OTP request failed. Status: $HTTP_STATUS"
          echo "Message: $(echo "$JSON_BODY" | jq -r '.message // .error // .msg // .description // "No error message provided"')"
          exit 1
        fi

        UNIQUE_KEY=$(echo "$JSON_BODY" | jq -r '.data.uniqueKey')
        echo "UNIQUE_KEY=$UNIQUE_KEY" >> $GITHUB_ENV

        
    - name: Retrieve Backup
      if: ${{ (env.CACHE_VALID == 'true' || env.CACHE_VALID == '') && inputs.otp_code != '' }}
      shell: bash
      run: |

        RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "https://dev.api.file-security.icredible.com/restore/$CACHED_FILE_ID" \
        -H "Authorization: Bearer ${{ env.TOKEN }}" \
        -H "X-Verification-Key: ${{ inputs.otp_code }}" \
        -H "X-Unique-Key: ${{ env.UNIQUE_KEY }}"  -o repo.tar.zst.enc)
        echo "Raw API Response: $RESPONSE"
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to obtain backup file. Response: $RESPONSE"
          echo "Error: Received HTTP status $HTTP_STATUS"
          echo "Response: $JSON_BODY"
          exit 1
        fi
        echo "Backup file retrieved successfully."

    - name: Decrypt and Extract Backup
      if: ${{ inputs.otp_code != '' }}
      shell: bash
      run: |
        echo "Decrypting repository"
        openssl enc -d -aes-256-cbc -pbkdf2 -in repo.tar.zst.enc -out repo.tar.zst -pass pass:${{ inputs.encryption_password }}
        echo "Extracting repository backup..."        
        zstd -d repo.tar.zst -o repo.tar
        tar -xf repo.tar
        rm -f repo.tar repo.tar.zst
        
        echo "Decryption and extraction complete."

    - name: Configure Git and Push
      if: ${{ inputs.otp_code != '' }}
      shell: bash
      run: |
        cd repo-mirror
       
        if [ -z "${{ inputs.restore_github_token }}" ]; then
          sudo apt install git-filter-repo -y
          git filter-repo --force --path .github/workflows --invert-paths
          TOKEN_TO_USE="${{ github.token }}"
        else
          TOKEN_TO_USE="${{ inputs.restore_github_token }}"
        fi
        
        git config user.name "myapp File Security"
        git config user.email "file-security@myapp.com"
        git push --mirror --force "https://x-access-token:${TOKEN_TO_USE}@github.com/${{ github.repository }}.git"
