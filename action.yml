name: 'Repository Restore'
description: 'Restores a backed-up GitHub repository using secure OTP and file ID through File Security API.'
author: 'your-github-username'

inputs:
  activation_code:
    description: 'Activation code for API'
    required: true
  encryption_key:
    description: 'Secret key for decrypting the backup'
    required: true
  restore_github_token:
    description: 'Token for repository mirror'
    required: true
  record_id:
    description: 'Enter RECORD_ID to retrieve a specific backup file.'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Activation Token
      id: get_token
      shell: bash
      run: |
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/endpoint/activation" \
        -H "Content-Type: application/json" \
        -d '{
          "activationCode": "${{ inputs.activation_code }}",
          "uniqueId": "${{ github.repository_id }}",
          "ip": "${{ runner.ip }}",
          "operatingSystem": "Linux",
          "endpointType": "Workstation",
          "endpointName": "Github Endpoint (${{ github.repository }})"
        }')

        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)

        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to get token" && exit 1
        fi

        TOKEN=$(echo "$JSON_BODY" | jq -r '.data.token')
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Request OTP (With Debug Output)
      shell: bash
      run: |
        echo "Requesting OTP..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/OTP/Send" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ env.TOKEN }}" \
          -d '{
            "Source": "FileDownload",
            "OtpGenerationMode": "Number",
            "Type": "MAIL"
          }')
    
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
    
        echo "--- RAW API RESPONSE ---"
        echo "$RESPONSE"
        echo "-------------------------"
        echo "HTTP STATUS: $HTTP_STATUS"
        echo "JSON BODY: $JSON_BODY"
    
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "OTP request failed. Status: $HTTP_STATUS"
          echo "Message: $(echo "$JSON_BODY" | jq -r '.message // .error // .msg // .description // "No error message provided"')"
          exit 1
        fi
    
        UNIQUE_KEY=$(echo "$JSON_BODY" | jq -r '.data.uniqueKey')
        echo "UNIQUE_KEY=$UNIQUE_KEY" >> $GITHUB_ENV


    - name: Await OTP Input
      id: await_otp
      uses: step-security/wait-for-secrets@v1
      with:
        secrets: |
          RESTORE_OTP_INPUT:
            name: 'Restore OTP'
            description: 'Enter OTP received via email'

    - name: Set OTP After Await
      shell: bash
      run: |
        echo "USER_OTP=${{ steps.await_otp.outputs.RESTORE_OTP_INPUT }}" >> $GITHUB_ENV

    - name: Retrieve Backup
      shell: bash
      run: |
        echo "Retrieving backup file..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "https://dev.api.file-security.icredible.com/restore/${{ inputs.record_id }}" \
        -H "Authorization: Bearer ${{ env.TOKEN }}" \
        -H "X-Verification-Key: ${{ env.USER_OTP }}" \
        -H "X-Unique-Key: ${{ env.UNIQUE_KEY }}"  -o repo.tar.zst.enc)
        echo "Raw API Response: $RESPONSE"
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to obtain backup file. Response: $RESPONSE"
          echo "Error: Received HTTP status $HTTP_STATUS"
          echo "Response: $JSON_BODY"
          exit 1
        fi
        echo "Backup file retrieved successfully."

    - name: Decrypt and Extract Backup
      shell: bash
      run: |
        echo "Decryption repository"
        openssl enc -d -aes-256-cbc -pbkdf2 -in repo.tar.zst.enc -out repo.tar.zst -pass pass:${{ inputs.encryption_key }}
        echo "Extracting repository backup..."        
        zstd -d repo.tar.zst -o repo.tar
        mkdir repo-mirror repo-metadata
        tar -xf repo.tar -C .
        rm -f repo.tar repo.tar.zst
        echo "Decryption and extraction complete."

    - name: Git Configuration
      shell: bash
      run: |
        cd repo-mirror
        git config user.name "myapp File Security"
        git config user.email "file-security@myapp.com"
        git config url."https://x-access-token:${{ inputs.restore_github_token }}@github.com/".insteadOf https://github.com/

    - name: Push Restored Repository
      shell: bash
      run: |
        cd repo-mirror
        git remote set-url origin https://x-access-token:${{ inputs.restore_github_token }}@github.com/${{ github.repository }}.git
        git push --mirror --force
        echo "Code repository restored successfully."
    
    - name: Install GitHub CLI
      shell: bash
      run: |
        # Install GH CLI without verbose output
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg 2>/dev/null
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
        sudo apt-get update -qq
        sudo apt-get install -y gh jq -qq

    - name: Import Repository Metadata
      shell: bash
      run: |
        # Authenticate GH CLI
        echo "${{ inputs.restore_github_token }}" | gh auth login --with-token

        # Import labels
        jq -c '.data.repository.labels.nodes[]' repo-metadata/labels_milestones.json | while read label; do
          name=$(echo "$label" | jq -r '.name')
          color=$(echo "$label" | jq -r '.color')
          desc=$(echo "$label" | jq -r '.description // ""')
          
          if ! gh label list | grep -q "\b$name\b"; then
            gh label create "$name" --color "$color" --description "$desc"
          else
            echo "Skipping existing label: $name"
          fi
        done

        # Import milestones
        jq -c '.data.repository.milestones.nodes[]' repo-metadata/labels_milestones.json | while read milestone; do
          title=$(echo "$milestone" | jq -r '.title')
          desc=$(echo "$milestone" | jq -r '.description // ""')
          due=$(echo "$milestone" | jq -r '.dueOn // ""')
          
          if ! gh milestone list | grep -q "\b$title\b"; then
            gh milestone create "$title" --description "$desc" $([ -n "$due" ] && echo "--due-date $due")
          else
            echo "Skipping existing milestone: $title"
          fi
        done

        # Import issues
        jq -c '.[]' repo-metadata/issues.json | while read issue; do
          title=$(echo "$issue" | jq -r '.title')
          state=$(echo "$issue" | jq -r '.state')
          labels=$(echo "$issue" | jq -r '.labels[].name' | tr '\n' ',' | sed 's/,$//')
          body=$(echo "$issue" | jq -r '.body' | sed 's/\\n/\\\\n/g')
          
          # Create issue
          gh issue create --title "$title" --body "$body" --label "$labels"
          
          # Close if needed
          if [ "$state" = "CLOSED" ]; then
            issue_number=$(gh issue list --json number,title -q ".[] | select(.title == \"$title\") | .number")
            if [ -n "$issue_number" ]; then
              gh issue close $issue_number
            fi
          fi
        done

        # Import pull requests with branch differentiation
        cd repo-mirror
        CURRENT_BRANCH=$(git branch --show-current)
        
        jq -c '.[]' ../repo-metadata/pull_requests.json | while read pr; do
          base_branch=$(echo "$pr" | jq -r '.baseRefName')
          head_branch=$(echo "$pr" | jq -r '.headRefName')
          title=$(echo "$pr" | jq -r '.title')
          state=$(echo "$pr" | jq -r '.state')
          labels=$(echo "$pr" | jq -r '.labels[].name' | tr '\n' ',' | sed 's/,$//')
          body=$(echo "$pr" | jq -r '.body' | sed 's/\\n/\\\\n/g')
          
          # Switch to head branch
          git checkout -b $head_branch origin/$base_branch 2>/dev/null || git checkout $head_branch
          
          # Create differentiation commit if branches are identical
          if [ "$(git rev-parse $base_branch)" = "$(git rev-parse $head_branch)" ]; then
            echo "Creating differentiation commit on $head_branch"
            touch "pr_diff_$head_branch"
            git add "pr_diff_$head_branch"
            git commit -m "PR differentiation commit"
            git push origin $head_branch
          fi
          
          # Create PR
          pr_url=$(gh pr create \
            --title "$title" \
            --body "$body" \
            --base $base_branch \
            --head $head_branch \
            --label "$labels")
            
          # Get PR number
          pr_number=$(echo $pr_url | grep -oE '[0-9]+$')
          
          # Update PR state
          if [ "$state" = "CLOSED" ]; then
            gh pr close $pr_number
          elif [ "$state" = "MERGED" ]; then
            gh pr merge $pr_number --merge
          fi
        done
        
        # Restore original branch
        git checkout $CURRENT_BRANCH
        cd ..
          


    
